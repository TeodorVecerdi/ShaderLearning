#pragma kernel CSMain

RWStructuredBuffer<int> RenderCheckBuffer;

RWTexture2D<float4> Result;
float4x4 CameraToWorld;
float4x4 CameraInverseProjection;
float4 DirectionalLight;

float2 PixelOffset;
float SkyboxRotation;

Texture2D<float4> SkyboxTexture;
SamplerState samplerSkyboxTexture;

static const float PI = 3.14159265f;
static const float DISTANCE_INFINITY = 1000000000.0;
static const float SKYBOX_INTENSITY = 1.0;

struct Ray {
	float3 origin;
	float3 direction;
	float3 energy;
};

struct HitInfo {
	float3 position;
	float3 normal;
	float distance;

	float3 albedo;
	float3 specular;
};

struct Sphere {
	float3 position;
	float radius;
	uint materialIndex;
};

struct Plane {
	float y;
	uint materialIndex;
};

struct Material {
	float3 albedo;
	float3 specular;
	float3 emission;
	float smoothness;
};

struct Scene {
	StructuredBuffer<Material> Materials;
	StructuredBuffer<Sphere> Spheres;
} CurrentScene;

static Ray CreateRay(const float3 origin, const float3 direction) {
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(1, 1, 1);
	return ray;
}

static HitInfo CreateHitInfo() {
	HitInfo hitInfo;
	hitInfo.position = float3(0, 0, 0);
	hitInfo.normal = float3(0, 0, 0);
	hitInfo.distance = DISTANCE_INFINITY;
	hitInfo.albedo = float3(0, 0, 0);
	hitInfo.specular = float3(0, 0, 0);
	return hitInfo;
}

static Sphere CreateSphere(const float3 position, const float radius, const uint materialIndex) {
	Sphere sphere;
	sphere.position = position;
	sphere.radius = radius;
	sphere.materialIndex = materialIndex;
	return sphere;
}

static Plane CreatePlane(const float y, const uint materialIndex) {
	Plane plane;
	plane.y = y;
	plane.materialIndex = materialIndex;
	return plane;
}

static Material CreateMaterial(const float3 albedo, const float3 specular) {
	Material material;
	material.albedo = albedo;
	material.specular = specular;
	return material;
}

Ray CreateRayFromCamera(float2 uv) {
	// transform camera to world space
	const float3 origin = mul(CameraToWorld, float4(0, 0, 0, 1)).xyz;

	// Invert the perspective projection
	float3 direction = mul(CameraInverseProjection, float4(uv, 0, 1)).xyz;
	// Transform the direction from camera space to world space and normalize
	direction = mul(CameraToWorld, float4(direction, 0.0)).xyz;
	direction = normalize(direction);

	return CreateRay(origin, direction);
}

void IntersectGroundPlane(Ray ray, inout HitInfo bestHit, Plane plane) {
	float t = (-ray.origin.y + plane.y) / ray.direction.y;
	if (t > 0 && t < bestHit.distance) {
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = float3(0, 1, 0);
		bestHit.albedo = CurrentScene.Materials[plane.materialIndex].albedo;
		bestHit.specular = CurrentScene.Materials[plane.materialIndex].specular;
	}
}

void IntersectSphere(Ray ray, inout HitInfo bestHit, Sphere sphere) {
	float3 d = ray.origin - sphere.position;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;

	if (p2sqr < 0) return;
	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0 && t < bestHit.distance) {
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.position);
		
		bestHit.albedo = CurrentScene.Materials[sphere.materialIndex].albedo;
		bestHit.specular = CurrentScene.Materials[sphere.materialIndex].specular;
	}
}

uint SphereCount;

float3 SampleSkybox(float3 direction) {
	float theta = acos(direction.y) / -PI;
	float phi = atan2(direction.x, -direction.z) / -PI * 0.5;
	return SKYBOX_INTENSITY * SkyboxTexture.SampleLevel(samplerSkyboxTexture, float2(phi + (SkyboxRotation / 360.0f), theta), 0);
}

HitInfo Trace(Ray ray) {
	HitInfo bestHit = CreateHitInfo();
	IntersectGroundPlane(ray, bestHit, CreatePlane(-4.0f, 0));

	for (uint i = 0; i < SphereCount; i++) {
		IntersectSphere(ray, bestHit, CurrentScene.Spheres[i]);
	}

	return bestHit;
}

float3 Shade(inout Ray ray, HitInfo hit) {
	if (hit.distance < DISTANCE_INFINITY) {
		const float3 specular = hit.specular;
		const float3 albedo = hit.albedo;
		const float ambient = 0.05;

		ray.origin = hit.position + hit.normal * 0.001f;
		ray.direction = reflect(ray.direction, hit.normal);
		ray.energy *= specular;

		// Trace shadow ray
		const Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -DirectionalLight.xyz);
		const HitInfo shadowHitInfo = Trace(shadowRay);
		if (shadowHitInfo.distance < DISTANCE_INFINITY) {
			ray.energy = 0;
			return albedo * ambient;
		}

		return saturate(saturate(-dot(hit.normal, DirectionalLight.xyz)) * DirectionalLight.w * albedo + albedo * ambient);
	}

	ray.energy = 0.0f;
	return SampleSkybox(ray.direction);
}

[numthreads(32, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
	uint width, height, stride;
	Result.GetDimensions(width, height);
	CurrentScene.Spheres.GetDimensions(SphereCount, stride);

	// convert to [-1, 1] range
	const float2 uv = float2((id.xy + PixelOffset) / float2(width, height) * 2.0 - 1.0);
	Ray ray = CreateRayFromCamera(uv);

	float3 result = float3(0, 0, 0);
	for (int i = 0; i < 4; i++) {
		const HitInfo hitInfo = Trace(ray);
		result += ray.energy * Shade(ray, hitInfo);

		if (!any(ray.energy)) break;
	}

	Result[id.xy] = float4(result, 1);

	if (id.x == 0 && id.y == 0)
		RenderCheckBuffer[0] = 1;
}