#pragma kernel CSMain

RWStructuredBuffer<int> RenderCheckBuffer;

RWTexture2D<float4> Result;
float4x4 CameraToWorld;
float4x4 CameraInverseProjection;
float2 PixelOffset;

Texture2D<float4> SkyboxTexture;
SamplerState samplerSkyboxTexture;

static const float PI = 3.14159265f;
static const float DISTANCE_INFINITY = 1000000000.0;

#include "Structs.hlsli"
#include "Intersections.hlsli"

float3 SampleSkybox(float3 direction) {
	float theta = acos(direction.y) / -PI;
	float phi = atan2(direction.x, -direction.z) / -PI * 0.5;
	return SkyboxTexture.SampleLevel(samplerSkyboxTexture, float2(phi, theta), 0);
}

float3 Shade(inout Ray ray, HitInfo hit) {
	if(hit.distance < DISTANCE_INFINITY) {
		return hit.color;
	}
	return SampleSkybox(ray.direction);
}

HitInfo Trace(Ray ray) {
	HitInfo bestHit = CreateHitInfo();
	IntersectGroundPlane(ray, bestHit, 0);
	IntersectSphere(ray, bestHit, CreateSphere(float3(-148.33, 1.54, -9.17), float3(0.2,0.7,0.1), 1.0f));
	return bestHit;
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
	uint width, height;
	Result.GetDimensions(width, height);

	// convert to [-1, 1] range
	const float2 uv = float2((id.xy + PixelOffset) / float2(width, height) * 2.0 - 1.0);
	Ray ray = CreateRayFromCamera(uv);
	
	const HitInfo hitInfo = Trace(ray);
	float3 result = Shade(ray, hitInfo);
	Result[id.xy] = float4(result, 1);
	
	if(id.x == 0 && id.y == 0)
		RenderCheckBuffer[0] = 1;
}
