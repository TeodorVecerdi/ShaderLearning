#pragma kernel CSMain

RWStructuredBuffer<int> RenderCheckBuffer;

RWTexture2D<float4> Result;
float4x4 CameraToWorld;
float4x4 CameraInverseProjection;
float4 DirectionalLight;
float Sample;

float2 PixelOffset;

Texture2D<float4> SkyboxTexture;
SamplerState samplerSkyboxTexture;

static const float PI = 3.14159265f;
static const float DISTANCE_INFINITY = 1000000000.0;
static const float SKYBOX_INTENSITY = 1.0;

#include "../Utils/Random.cginc"
#include "Math.cginc"
#include "Structs.cginc"
Scene CurrentScene;
#include "Intersections.cginc"

uint SphereCount;

float3 SampleSkybox(float3 direction) {
	float theta = acos(direction.y) / -PI;
	float phi = atan2(direction.x, -direction.z) / -PI * 0.5;
	return SKYBOX_INTENSITY * SkyboxTexture.SampleLevel(samplerSkyboxTexture, float2(phi, theta), 0);
}

HitInfo Trace(Ray ray) {
	HitInfo bestHit = CreateHitInfo();
	IntersectGroundPlane(ray, bestHit, CreatePlane(-6.0f, 0)); 

	for (uint i = 0; i < SphereCount; i++) {
		IntersectSphere(ray, bestHit, CurrentScene.Spheres[i]);
	}

	return bestHit;
}

float3 Shade(inout Ray ray, HitInfo hit) {
	if (hit.distance < DISTANCE_INFINITY) {
		ray.origin = hit.position + hit.normal * 0.01f;
		ray.direction = SampleHemisphere(hit.normal);
		ray.energy *= 2.0f * hit.albedo * sdot(hit.normal, ray.direction);

		return 0.0f;
	}

	ray.energy = 0.0f;
	return SampleSkybox(ray.direction);
}

[numthreads(32, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
	RANDOM__Seed = 0.01;
	RANDOM__Pixel = id.xy;
	
	uint width, height, stride;
	Result.GetDimensions(width, height);
	CurrentScene.Spheres.GetDimensions(SphereCount, stride);

	const int samples = 132;
	float3 result = float3(0, 0, 0);
	for (int i = 0; i < samples; i++) {
		// convert to [-1, 1] range
		const float2 uv = float2((id.xy + PixelOffset) / float2(width, height) * 2.0f - 1.0f);
		Ray ray = CreateRayFromCamera(uv);

		for (int rays = 0; rays < 4; rays++) {
			const HitInfo hitInfo = Trace(ray);
			result += ray.energy * Shade(ray, hitInfo);

			if (!any(ray.energy))
				break;
		}
	}
	result /= samples;
	
	Result[id.xy] = float4(result, 1.0);

	if (id.x == 0 && id.y == 0)
		RenderCheckBuffer[0] = 1;
}
